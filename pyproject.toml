[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ppu"
dynamic = ["version"]
description = ''
readme = "README.md"
requires-python = ">=3.8"
license = {file = "LICENSE"}
keywords = []
authors = [
  { name = "Ralph Urlus", email = "rurlus.dev@gmail.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "License :: OSI Approved :: Apache Software License",
]
dependencies = ["copulas","numpy", "scipy", "matplotlib", "pandas", "synthsonic @ git+https://github.com/mbaak/synthsonic.git@dev"]

[project.urls]
Documentation = "https://github.com/RUrlus/PointPredictionUncertainty#readme"
Issues = "https://github.com/RUrlus/PointPredictionUncertainty/issues"
Source = "https://github.com/RUrlus/PointPredictionUncertainty"

[tool.hatch.version]
path = "src/ppu/__about__.py"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.types]
dependencies = [
  "mypy>=1.0.0",
]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/ppu tests}"

[tool.coverage.run]
source_pkgs = ["ppu", "tests"]
branch = true
parallel = true
omit = [
  "src/ppu/__about__.py",
]

[tool.coverage.paths]
ppu = ["src/ppu", "*/ppu/src/ppu"]
tests = ["tests", "*/ppu/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.ruff]
extend-select = [
    "E", # pyflakes `E`
    "W", # pyflakes `W`
    "I", # isort
    "TID", # flake8-tidy-imports
    "UP", # pyupgrade
    "D212", # pydocstyle
    "D411", # pydocstyle
    "C4",  # flake8-comprehensions
    "EM", # flake8-errmsg
    "FA", # flake8-future-annotations
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TD002", # flake8-todos
    "PL", # pylint
    "PERF", # perflint
    "FURB", # refurb
]
target-version = "py38"
line-length = 120
select = [
  # Enable Pyflakes `E`, `F` and `W` codes
  "F",
  # pytest
  "PT",
  # numpy
  "NPY",
  # import conventions
  "ICN",
  # prints
  "T20",
  # quotes
  "Q",
  # ruff-specific rules
  "RUF",
  # logging format
  "G",
  # pydocstyle
  "D",
  # annotation with autofix
  "ANN204",
  # error messages
  "EM",
  # raise
  "RSE",
  # flynt
  "FLY",
]

ignore = [
  "E501", # line length
  "PLR0913", # too many arguments
  "PLR2004", # magic value
  "PLR0912", # too many branches
  "PLR0915", # too many statements
  "PLR0911", # too many return statements
  "PLR6301", # method could be function/staticmethod
  # Only lint existing docstrings
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D106",
  "D107",
  # period not required
  "D400",
  "D415",
  # newline not required
  "D205",
  # address later
  "PLW2901",
  "PLC1901"
]

[tool.ruff.flake8-copyright]
notice-rgx = """(?mis)Copyright \\(c\\) 2023 ING Analytics Wholesale Banking.+"""

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "CPY001", "ANN001"]
"docs/sphinx/source/conf.py" = ["INP", "CPY001"]
"example.py" = ["T201", "CPY001"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.isort]
split-on-trailing-comma = false

[tool.ruff.format]
skip-magic-trailing-comma = true
